{{!-- Barra de acciones --}}
<div class="d-flex flex-wrap align-items-center gap-2 mb-3">
  <a class="btn btn-primary" href="/products/new">
    <i class="bi bi-plus-lg"></i> Agregar
  </a>
  <span id="countBadge" class="ms-auto badge rounded-pill text-bg-info">
    {{#if products.length}}{{products.length}} productos{{else}}0 productos{{/if}}
  </span>
</div>

{{!-- Estado vacÃ­o (lo dejamos en el DOM para poder alternar desde JS) --}}
<div id="emptyProductsAlert" class="alert alert-info" {{#if products.length}}style="display:none"{{/if}}>
  <i class="bi bi-info-circle-fill me-2"></i>
  No hay productos para mostrar.
  <a class="btn btn-sm btn-primary ms-2" href="/products/new">
    <i class="bi bi-plus-lg"></i> Agregar
  </a>
</div>

{{!-- Tarjeta con tabla --}}
<div id="productsCard" class="card shadow-sm" {{#unless products.length}}style="display:none"{{/unless}}>
  <div class="card-header bg-dark text-white d-flex align-items-center">
    <i class="bi bi-table me-2"></i>
    <strong>Listado de productos</strong>
  </div>

  <div class="table-responsive">
    <table class="table table-striped table-hover align-middle mb-0">
      <thead class="table-primary">
        <tr>
          <th scope="col">#</th>
          <th scope="col">Producto</th>
          <th scope="col">CÃ³digo</th>
          <th scope="col" class="text-end">Precio</th>
          <th scope="col" class="text-center">Stock</th>
          <th scope="col">CategorÃ­a</th>
          <th scope="col" class="text-center">Acciones</th>
        </tr>
      </thead>

      <tbody id="productsTbody">
        {{#each products}}
        <tr data-id="{{id}}">
          <th scope="row" class="p-id">{{id}}</th>
          <td class="fw-medium">
            <span class="p-title">{{title}}</span>
            {{#if thumbnail}}
              <span class="badge text-bg-info ms-2">con imagen</span>
            {{/if}}
          </td>
          <td><span class="badge text-bg-secondary p-code">{{code}}</span></td>
          <td class="text-end p-price">${{price}}</td>
          <td class="text-center p-stock">
            {{#if stock}}
              <span class="badge text-bg-success">{{stock}}</span>
            {{else}}
              <span class="badge text-bg-danger">0</span>
            {{/if}}
          </td>
          <td class="p-category">{{category}}</td>
          <td class="text-center">
            <div class="btn-group" role="group">
              <a class="btn btn-sm btn-primary" title="Actualizar" href="/products/edit/{{id}}">
                <i class="bi bi-pencil-square"></i>
              </a>
              <button class="btn btn-sm btn-danger btn-delete" title="Eliminar" data-id="{{id}}">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </td>
        </tr>
        {{/each}}
      </tbody>

      <tfoot class="table-light">
        <tr>
          <td colspan="7" class="text-end">
            <span id="totalFooter" class="badge text-bg-secondary">
              Total: {{products.length}} Ã­tems
            </span>
          </td>
        </tr>
      </tfoot>
    </table>
  </div>
</div>

{{!-- Toastify --}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<script src="/socket.io/socket.io.js"></script>
<script>
  // ===== Socket primero (necesitamos socket.id en fetch) =====
  const socket = io();
  socket.on('connect', () => console.log('âœ… socket conectado', socket.id));

  // Helper para fetch con x-socket-id en headers
  const apiFetch = (url, opts = {}) => {
    const headers = new Headers(opts.headers || {});
    if (socket?.id) headers.set('x-socket-id', socket.id);
    // si es JSON y no seteaste content-type, lo agrego
    if (opts.body && !(opts.body instanceof FormData) && !headers.has('Content-Type')) {
      headers.set('Content-Type', 'application/json');
    }
    return fetch(url, { ...opts, headers });
  };

  // ===== Helpers UI =====
  const toast = (text, type = 'info') => {
    const bg = type === 'success'
      ? "linear-gradient(to right, #00b09b, #96c93d)"
      : type === 'error'
      ? "linear-gradient(to right, #e53935, #e35d5b)"
      : type === 'warning'
      ? "linear-gradient(to right, #f2994a, #f2c94c)"
      : "linear-gradient(to right, #3f2b96, #a8c0ff)";

    Toastify({ text, duration: 3000, gravity: "top", position: "right", backgroundColor: bg, close: true, stopOnFocus: true }).showToast();
  };

  const fmtPrice = (n) => {
    const v = Number(n ?? 0);
    try { return v.toLocaleString('es-AR', { style:'currency', currency:'ARS', minimumFractionDigits: 2 }); }
    catch { return '$ ' + v.toFixed(2); }
  };

  // ===== DOM refs =====
  let tbody = document.getElementById('productsTbody');
  const countBadge   = document.getElementById('countBadge');
  const totalFooter  = document.getElementById('totalFooter');
  const productsCard = document.getElementById('productsCard');
  const emptyAlert   = document.getElementById('emptyProductsAlert');

  // ===== Render helpers =====
  const rowHTML = (p) => `
    <tr data-id="${String(p.id)}">
      <th scope="row" class="p-id">${String(p.id)}</th>
      <td class="fw-medium">
        <span class="p-title">${p.title ?? ''}</span>
        ${p.thumbnail ? '<span class="badge text-bg-info ms-2">con imagen</span>' : ''}
      </td>
      <td><span class="badge text-bg-secondary p-code">${p.code ?? ''}</span></td>
      <td class="text-end p-price">${fmtPrice(p.price)}</td>
      <td class="text-center p-stock">
        ${Number(p.stock) > 0 ? `<span class="badge text-bg-success">${p.stock}</span>` : `<span class="badge text-bg-danger">0</span>`}
      </td>
      <td class="p-category">${p.category ?? ''}</td>
      <td class="text-center">
        <div class="btn-group" role="group">
          <a class="btn btn-sm btn-primary" title="Actualizar" href="/products/edit/${encodeURIComponent(String(p.id))}">
            <i class="bi bi-pencil-square"></i>
          </a>
          <button class="btn btn-sm btn-danger btn-delete" title="Eliminar" data-id="${String(p.id)}">
            <i class="bi bi-trash"></i>
          </button>
        </div>
      </td>
    </tr>
  `;

  const findRow = (id) => {
    if (!tbody) tbody = document.getElementById('productsTbody');
    const sel = `tr[data-id="${CSS && CSS.escape ? CSS.escape(String(id)) : String(id)}"]`;
    return tbody?.querySelector(sel);
  };

  const toggleEmptyState = () => {
    if (!tbody) return;
    const count = tbody.querySelectorAll('tr').length;
    if (countBadge)  countBadge.textContent = `${count} producto${count === 1 ? '' : 's'}`;
    if (totalFooter) totalFooter.textContent = `Total: ${count} Ã­tem${count === 1 ? '' : 'es'}`;
    if (productsCard) productsCard.style.display = count ? '' : 'none';
    if (emptyAlert)   emptyAlert.style.display   = count ? 'none' : '';
  };

  const upsertRow = (p) => {
    if (!p || p.id == null || !tbody) return;
    const temp = document.createElement('tbody');
    temp.innerHTML = rowHTML(p).trim();
    const fresh = temp.firstElementChild;

    const old = findRow(p.id);
    if (old) old.replaceWith(fresh);
    else tbody.appendChild(fresh);
    toggleEmptyState();
  };

  const removeRow = (id) => {
    const row = findRow(id);
    if (row) {
      row.remove();           // âœ… ahora sÃ­ elimina
      toggleEmptyState();
    }
  };

  // ===== Borrado optimista (desde TU pestaÃ±a) =====
  const recentlyDeleted = new Set();
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('.btn-delete');
    if (!btn) return;

    // Tomar el id desde la fila para garantizar consistencia
    const row = btn.closest('tr[data-id]');
    const id  = row?.dataset?.id?.trim();
    if (!id) return;

    if (!confirm(`Â¿Eliminar producto #${id}?`)) return;

    const res = await apiFetch(`/api/products/${encodeURIComponent(id)}`, {
      method: 'DELETE'
    });

    if (!res.ok) {
      const j = await res.json().catch(() => ({}));
      toast(j.error || 'No se pudo eliminar', 'error');
      return;
    }

    removeRow(id); // borrado inmediato (optimista)
    toast(`Producto eliminado: ID ${id}`, 'error');

    recentlyDeleted.add(String(id));
    setTimeout(() => recentlyDeleted.delete(String(id)), 2000);
  });

  // ===== Socket.IO =====
  socket.on('products:created', (p) => {
    toast(`Producto creado: ${p.title ?? '(sin tÃ­tulo)'} (#${p.id})`, 'success');
    upsertRow(p);
  });

  socket.on('products:updated', (p) => {
    toast(`Producto actualizado: ${p.title ?? '(sin tÃ­tulo)'} (#${p.id})`, 'warning');
    upsertRow(p);
  });

  socket.on('products:deleted', (payload) => {

    const id = payload?.deleted.id;         // <- SIEMPRE existe
    if (id == null) {
      console.warn('products:deleted payload invÃ¡lido:', payload);
      return;
    }
    if (recentlyDeleted.has(String(id))) return;
    toast(`Producto eliminado: ID ${id}`, 'error');
    alert('llego el id',id)
    removeRow(id);
  });

  // Debug opcional
  socket.onAny((ev, ...args) => console.log('ðŸ“© evento recibido:', ev, args));
</script>
